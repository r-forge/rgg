/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * RGGVisualView.java
 *
 * Created on 31.10.2008, 14:14:39
 */
package org.arcs.rgg.rggnbmod.filetype;

import at.ac.arcs.rgg.RGG;
import java.awt.Image;
import javax.swing.Action;
import javax.swing.JComponent;
import javax.swing.JPanel;
import org.netbeans.core.spi.multiview.CloseOperationState;
import org.netbeans.core.spi.multiview.MultiViewDescription;
import org.netbeans.core.spi.multiview.MultiViewElement;
import org.netbeans.core.spi.multiview.MultiViewElementCallback;
import org.openide.awt.UndoRedo;
import org.openide.util.HelpCtx;
import org.openide.util.Lookup;
import org.openide.util.Mutex;
import org.openide.windows.TopComponent;

/**
 *
 * @author ahmet
 */
public class RGGVisualView extends javax.swing.JPanel implements
        MultiViewDescription, MultiViewElement, Runnable {

    private RGGEditorSupport support;
    private RGG rgg;
    private MultiViewElementCallback callback;

    public void setRGG(RGG rgg) {
        this.rgg = rgg;
        rggScrollPane.setViewportView(rgg.buildPanel(true, false));
        setName(rgg.getRGGName());
    }

    public RGG getRGG() {
        return rgg;
    }

    /** Creates a new instance of RGGVisualView */
    public RGGVisualView(RGGEditorSupport ed) {
        support = ed;
        initComponents();
    }

    public int getPersistenceType() {
        return TopComponent.PERSISTENCE_ONLY_OPENED;
    }

    public String getDisplayName() {
        return "GUI";
    }

    public Image getIcon() {
        return null;
    }

    public HelpCtx getHelpCtx() {
        return HelpCtx.DEFAULT_HELP;
    }

    public String preferredID() {
        return "gui";
    }

    public MultiViewElement createElement() {

        return this;
    }

    public JComponent getVisualRepresentation() {
        return this;
    }

    public JComponent getToolbarRepresentation() {
        return new JPanel();
    }

    public UndoRedo getUndoRedo() {
        return null;
    }

    public CloseOperationState canCloseElement() {
        return CloseOperationState.STATE_OK;
    }

    public Action[] getActions() {
        return support.getDataObject().
                getNodeDelegate().getActions(false);
    }

    public Lookup getLookup() {
        return ((RGGDataObject) support.getDataObject()).getNodeDelegate().getLookup();
    }

    public void componentOpened() {
    }

    public void componentClosed() {
    }

    public void componentShowing() {
    }

    public void componentHidden() {
    }

    public void componentActivated() {
    }

    public void componentDeactivated() {
    }

    public void setMultiViewCallback(
            MultiViewElementCallback multiViewElementCallback) {
        callback = multiViewElementCallback;
        updateName();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        rggScrollPane = new javax.swing.JScrollPane();
        rggContainer = new javax.swing.JPanel();

        setLayout(new java.awt.BorderLayout());

        rggScrollPane.setBorder(null);

        rggContainer.setLayout(new java.awt.BorderLayout());
        rggScrollPane.setViewportView(rggContainer);

        add(rggScrollPane, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel rggContainer;
    private javax.swing.JScrollPane rggScrollPane;
    // End of variables declaration//GEN-END:variables
    public void run() {
        MultiViewElementCallback c = callback;
        if (c == null) {
            return;
        }
        TopComponent tc = c.getTopComponent();
        if (tc == null) {
            return;
        }
        tc.setName(support.getEditingRGG().getRGGName());
        tc.setDisplayName(support.getEditingRGG().getRGGName());
    }

    private void updateName() {
        Mutex.EVENT.readAccess(this);
    }
}
