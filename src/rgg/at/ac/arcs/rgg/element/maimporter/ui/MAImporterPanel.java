/*
 * MAImporterPanel.java
 *
 * Created on 23. April 2008, 22:23
 */
package at.ac.arcs.rgg.element.maimporter.ui;

import java.awt.Cursor;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.ExecutionException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import javax.swing.UIManager;
import at.ac.arcs.rgg.element.maimporter.array.*;
import at.ac.arcs.rgg.util.BusyDialog;
import at.ac.arcs.rgg.util.RGGFileExtensionFilter;
import org.jdesktop.swingworker.SwingWorker;

/**
 *
 * @author  ilhami
 */
public class MAImporterPanel extends javax.swing.JPanel {

    private TargetFile targetfile;
    private String arraySource;

    /** Creates new form MAImporterPanel */
    public MAImporterPanel() {
        initComponents();
        addTabs();
    }

    public TargetFile getTargetFile() {
        return targetfile;
    }

    public String getRHeader() {
        return rgListPanel.getRHeader();
    }

    public String getRbHeader() {
        return rgListPanel.getRbHeader();
    }

    public String getGHeader() {
        return rgListPanel.getGHeader();
    }

    public String getGbHeader() {
        return rgListPanel.getGbHeader();
    }

    public List<String> getAnnotationHeaders() {
        return rgListPanel.getAnnotationHeaders();
    }

    public String getArraySource() {
        return arraySource;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        inputPanel = new javax.swing.JPanel();
        loadTargetFileXHyperlink = new org.jdesktop.swingx.JXHyperlink();
        chooseMicroArraysXHyperlink = new org.jdesktop.swingx.JXHyperlink();
        jXHeader1 = new org.jdesktop.swingx.JXHeader();
        targetFileChooser = new javax.swing.JFileChooser();
        arraysFileChooser = new javax.swing.JFileChooser();
        tabbedPane = new javax.swing.JTabbedPane();

        loadTargetFileXHyperlink.setClickedColor(new java.awt.Color(0, 51, 255));
        loadTargetFileXHyperlink.setText("Load Target File");
        loadTargetFileXHyperlink.setFont(new java.awt.Font("Tahoma", 0, 14));
        loadTargetFileXHyperlink.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
        loadTargetFileXHyperlink.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadTargetFileXHyperlinkActionPerformed(evt);
            }
        });

        chooseMicroArraysXHyperlink.setClickedColor(new java.awt.Color(0, 51, 255));
        chooseMicroArraysXHyperlink.setText("Choose Microarrays");
        chooseMicroArraysXHyperlink.setFont(new java.awt.Font("Tahoma", 0, 14));
        chooseMicroArraysXHyperlink.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
        chooseMicroArraysXHyperlink.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chooseMicroArraysXHyperlinkActionPerformed(evt);
            }
        });

        jXHeader1.setDescription("Please use the ...");
        jXHeader1.setTitle("Tasks");

        org.jdesktop.layout.GroupLayout inputPanelLayout = new org.jdesktop.layout.GroupLayout(inputPanel);
        inputPanel.setLayout(inputPanelLayout);
        inputPanelLayout.setHorizontalGroup(
            inputPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jXHeader1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 212, Short.MAX_VALUE)
            .add(inputPanelLayout.createSequentialGroup()
                .add(19, 19, 19)
                .add(inputPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(loadTargetFileXHyperlink, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(chooseMicroArraysXHyperlink, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(72, Short.MAX_VALUE))
        );
        inputPanelLayout.setVerticalGroup(
            inputPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(inputPanelLayout.createSequentialGroup()
                .add(jXHeader1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 60, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(32, 32, 32)
                .add(loadTargetFileXHyperlink, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(28, 28, 28)
                .add(chooseMicroArraysXHyperlink, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(98, Short.MAX_VALUE))
        );

        targetFileChooser.setFileFilter(new RGGFileExtensionFilter("Target File", "txt"));

        arraysFileChooser.setDialogTitle("Microarrays");
        arraysFileChooser.setMultiSelectionEnabled(true);

        setLayout(new java.awt.BorderLayout());

        tabbedPane.setTabPlacement(javax.swing.JTabbedPane.LEFT);
        add(tabbedPane, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

private void loadTargetFileXHyperlinkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadTargetFileXHyperlinkActionPerformed
    int status = targetFileChooser.showOpenDialog(loadTargetFileXHyperlink);
    if (status == JFileChooser.APPROVE_OPTION) {
        try {
            targetfile = readTargetFile(targetFileChooser.getSelectedFile());
            if (targetfile == null) {
                return;
            }
            importMA(targetfile);
        } catch (ArrayDetectionException ex) {
            Logger.getLogger(MAImporterPanel.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(loadTargetFileXHyperlink,
                    ex.getMessage(), "Array Detection Error", JOptionPane.ERROR_MESSAGE);
        } catch (TargetFileException ex) {
            Logger.getLogger(MAImporterPanel.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(loadTargetFileXHyperlink,
                    ex.getMessage(), "Target File Error", JOptionPane.ERROR_MESSAGE);
        }
    }
}//GEN-LAST:event_loadTargetFileXHyperlinkActionPerformed

private void chooseMicroArraysXHyperlinkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chooseMicroArraysXHyperlinkActionPerformed
    int status = arraysFileChooser.showOpenDialog(chooseMicroArraysXHyperlink);//GEN-LAST:event_chooseMicroArraysXHyperlinkActionPerformed
        if (status == JFileChooser.APPROVE_OPTION) {
            try {
                targetfile = TargetFile.createTargetFile(arraysFileChooser.getSelectedFiles());
                importMA(targetfile);
            } catch (ArrayDetectionException ex) {
                Logger.getLogger(MAImporterPanel.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(loadTargetFileXHyperlink,
                        ex.getMessage(), "Array Detection Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }

    private ArrayList<ArrayInfo> recognizeArrays(final TargetFile targetFile) throws ArrayDetectionException {
        final BusyDialog busy = new BusyDialog(null, true,
                "Recognizing arrays...", BusyDialog.ACTION.CANCEL);
        SwingWorker<ArrayList<ArrayInfo>, Object> worker = new SwingWorker<ArrayList<ArrayInfo>, Object>() {

            @Override
            protected ArrayList<ArrayInfo> doInBackground() throws ArrayDetectionException {
                return ArrayRecognizers.recognizeArraysInTargetFile(targetFile);
            }

            @Override
            protected void done() {
                super.done();
                busy.setVisible(false);
            }
        };

        worker.execute();
        busy.setVisible(true);
        if (busy.getActionClicked() == BusyDialog.ACTION.CANCEL) {
            worker.cancel(true);
            return null;
        }

        try {
            return worker.get();
        } catch (InterruptedException ex) {
            Logger.getLogger(MAImporterPanel.class.getName()).log(Level.SEVERE, null, ex);
            //TODO ist es gute Idee hier null zur√ºckzugeben???
            return null;
        } catch (ExecutionException ex) {
            Logger.getLogger(MAImporterPanel.class.getName()).log(Level.SEVERE, null, ex);
            throw (ArrayDetectionException) ex.getCause();
        }
    }

    private void importMA(TargetFile targetFile) throws ArrayDetectionException {
        //recognize arrays in the target file
        ArrayList<ArrayInfo> arrayInfos = recognizeArrays(targetFile);

        //are all arrays share the same feature set? like same array type,same color type ...
        if (ArrayRecognizers.checkArraysForUniformFeatureSet(arrayInfos)) {
            ArrayInfo sampleArrayInfo = arrayInfos.get(0);
            arraySource = sampleArrayInfo.getArraySource();
            if (sampleArrayInfo.isGenericType()) {
                throw new UnsupportedOperationException("Not yet implemented");
            } else { //known array type found

                try {
                    //prepare for array header line setting
                    headerRowSelectionPanel =
                            new ArrayHeaderRowSelectionPanel(sampleArrayInfo);
                    tabbedPane.setComponentAt(1, headerRowSelectionPanel);

                    targetFilePanel.setModel(new TargetFileTableModel(targetFile));

                    Array arrayView = sampleArrayInfo.getArrayCreator().
                            makeArray(sampleArrayInfo);

                    rgListPanel.setArrayView(arrayView);
                    //show "Target File" tab
                    tabbedPane.setSelectedComponent(rgListPanel);

                } catch (FileNotFoundException ex) {
                    Logger.getLogger(MAImporterPanel.class.getName()).log(Level.SEVERE, null, ex);
                } catch (IOException ex) {
                    Logger.getLogger(MAImporterPanel.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        } else {
            JOptionPane.showMessageDialog(loadTargetFileXHyperlink,
                    createErrorMessage(arrayInfos), "Wrong Array Type Error",
                    JOptionPane.ERROR_MESSAGE);
        }
    }

    private String createErrorMessage(ArrayList<ArrayInfo> arrayInfos) {
        StringBuffer sbuf = new StringBuffer("Error Target file");
//        for(ArrayInfo inf:arrayInfos){
//            if(inf == null)
//        }        
        return sbuf.toString();
    }

    private TargetFile readTargetFile(final File selectedFile) throws TargetFileException {
        final BusyDialog busy = new BusyDialog(null, true,
                "Reading target file...", BusyDialog.ACTION.CANCEL);
        SwingWorker<TargetFile, Object> worker = new SwingWorker<TargetFile, Object>() {

            protected TargetFile doInBackground() throws TargetFileException {
                return TargetFile.createTargetFile(selectedFile);
            }

            @Override
            protected void done() {
                super.done();
                busy.setVisible(false);
            }
        };
        worker.execute();
        busy.setVisible(true);
        if (busy.getActionClicked() == BusyDialog.ACTION.CANCEL) {
            worker.cancel(true);
            return null;
        }

        try {
            return worker.get();
        } catch (InterruptedException ex) {
            Logger.getLogger(MAImporterPanel.class.getName()).log(Level.SEVERE, null, ex);
            //TODO ist es gute Idee hier null zur√ºckzugeben???
            return null;
        } catch (ExecutionException ex) {
            Logger.getLogger(MAImporterPanel.class.getName()).log(Level.SEVERE, null, ex);
            throw (TargetFileException) ex.getCause();
        }
    }

    private void addTabs() {
        VTextIcon textIcon = new VTextIcon(tabbedPane, "Select Microarray Data", VTextIcon.ROTATE_LEFT);
        tabbedPane.addTab(null, textIcon, inputPanel);
        textIcon = new VTextIcon(tabbedPane, "Set Header Line", VTextIcon.ROTATE_LEFT);
        tabbedPane.addTab(null, textIcon, new ArrayHeaderRowSelectionPanel());
        textIcon = new VTextIcon(tabbedPane, "Target File", VTextIcon.ROTATE_LEFT);
        tabbedPane.addTab(null, textIcon, targetFilePanel);
        textIcon = new VTextIcon(tabbedPane, "Settings", VTextIcon.ROTATE_LEFT);
        tabbedPane.addTab(null, textIcon, rgListPanel);    
    }

    public static void main(String[] args) {
        try {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } catch (Exception ex) {
            Logger.getLogger(MAImporterPanel.class.getName()).log(Level.SEVERE, null, ex);
        }

        SwingUtilities.invokeLater(new Runnable() {

            public void run() {
                JFrame f = new JFrame("sdkljfls");
//        f.setSize(700, 700);
                f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
                MAImporterPanel mapanel = new MAImporterPanel();
                System.out.println(mapanel.getPreferredSize());
                f.setContentPane(mapanel);
                f.setSize(mapanel.getPreferredSize());
                f.setVisible(true);
            }
        });

    }
    private ArrayHeaderRowSelectionPanel headerRowSelectionPanel;
    private TargetFilePanel targetFilePanel = new TargetFilePanel();
    private RGListSettingsPanelII rgListPanel = new RGListSettingsPanelII();
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JFileChooser arraysFileChooser;
    private org.jdesktop.swingx.JXHyperlink chooseMicroArraysXHyperlink;
    private javax.swing.JPanel inputPanel;
    private org.jdesktop.swingx.JXHeader jXHeader1;
    private org.jdesktop.swingx.JXHyperlink loadTargetFileXHyperlink;
    private javax.swing.JTabbedPane tabbedPane;
    private javax.swing.JFileChooser targetFileChooser;
    // End of variables declaration//GEN-END:variables
}
