/*
 * RGListSettingsPanel.java
 *
 * Created on 05. Mai 2008, 22:27
 */
package at.ac.arcs.rgg.element.maimporter.ui;

import com.jgoodies.forms.builder.PanelBuilder;
import com.jgoodies.forms.layout.CellConstraints;
import com.jgoodies.forms.layout.FormLayout;
import java.awt.BorderLayout;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Vector;
import java.util.concurrent.ExecutionException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultCellEditor;
import javax.swing.JScrollPane;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;
import at.ac.arcs.rgg.element.maimporter.array.Array;
import at.ac.arcs.rgg.element.maimporter.ui.inputselection.AdjustmentController;
import at.ac.arcs.rgg.element.maimporter.ui.inputselection.InputList;
import at.ac.arcs.rgg.element.maimporter.ui.inputselection.InputSelectorTable;
import org.jdesktop.swingworker.SwingWorker;
import org.jdesktop.swingx.JXTable;

/**
 *
 * @author  ilhami
 */
public class RGListSettingsPanelIII extends javax.swing.JPanel {

    private JXTable table;
    private InputSelectorTable inputSelectorTable;
    private Array array;
    private JScrollPane inputSelectorScrollPane;
    private JScrollPane tableScrollPane;

    /** Creates new form RGListSettingsPanel */
    public RGListSettingsPanelIII() {
        initComponents();
//        setLayout(new BorderLayout());
//        jXHeader1 = new org.jdesktop.swingx.JXHeader();
        inputSelectorScrollPane = new javax.swing.JScrollPane();
        tableScrollPane = new javax.swing.JScrollPane();

//        jXHeader1.setDescription("Description");
//        jXHeader1.setTitle("Title");

        inputSelectorScrollPane.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        inputSelectorScrollPane.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);
        
        table = new JXTable();
        table.setDefaultEditor(Object.class, new DefaultCellEditor(new JTextField()));
        table.setColumnControlVisible(true);
        table.setHorizontalScrollEnabled(true);
        tableScrollPane.setViewportView(table);
        
        jScrollPane2.setViewportView(table);
        
//        tablesPanel.add(inputSelectorScrollPane,BorderLayout.NORTH);
//        tablesPanel.add(tableScrollPane,BorderLayout.CENTER);
        
        
        AdjustmentController controller = new AdjustmentController();
        controller.registerScrollPane(tableScrollPane);
        controller.registerScrollPane(inputSelectorScrollPane);
//        FormLayout layout = new FormLayout(
//                "pref:grow", // columns
//                "p, 3dlu, p, p");      // rows
//
//        PanelBuilder builder = new PanelBuilder(layout);
//        CellConstraints cc = new CellConstraints();
//        builder.add(jXHeader1, cc.xy(1, 1));
//        builder.add(inputSelectorScrollPane, cc.xy(1, 3));
//        builder.add(tableScrollPane, cc.xy(1, 4));
//
//        setLayout(new BorderLayout());
//        add(builder.getPanel(),BorderLayout.CENTER);
    }

    public void setArrayView(Array array) throws IOException {
        this.array = array;
        setTableModel(array);
        InputList ilist = new InputList();
        ilist.put(array.getG());
        ilist.put(array.getGb());
        ilist.put(array.getR());
        ilist.put(array.getRb());
        ilist.put(array.getAnnotations());
        inputSelectorTable = new InputSelectorTable(table, ilist);
//        table.setHorizontalScrollEnabled(true);
        inputSelectorScrollPane.setViewportView(inputSelectorTable);
        jScrollPane1.setViewportView(inputSelectorTable);
    }

    public String getRHeader() {
        return inputSelectorTable.getColumnName(array.getR().getFirstColumn());
    }

    public String getRbHeader() {
        return inputSelectorTable.getColumnName(array.getRb().getFirstColumn());
    }

    public String getGHeader() {
        return inputSelectorTable.getColumnName(array.getG().getFirstColumn());
    }

    public String getGbHeader() {
        return inputSelectorTable.getColumnName(array.getGb().getFirstColumn());
    }

    public List<String> getAnnotationHeaders() {
        ArrayList<String> anns = new ArrayList<String>();
        for (Integer i : array.getAnnotations().getColumns()) {
            anns.add(inputSelectorTable.getColumnName(i));
        }
        return anns;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jXHeader1 = new org.jdesktop.swingx.JXHeader();
        tablesPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jScrollPane2 = new javax.swing.JScrollPane();

        setLayout(new java.awt.BorderLayout());

        jXHeader1.setDescription("Description");
        jXHeader1.setTitle("Title");
        add(jXHeader1, java.awt.BorderLayout.NORTH);

        tablesPanel.setLayout(new java.awt.BorderLayout());

        jScrollPane1.setPreferredSize(new java.awt.Dimension(100, 30));
        tablesPanel.add(jScrollPane1, java.awt.BorderLayout.PAGE_START);
        tablesPanel.add(jScrollPane2, java.awt.BorderLayout.CENTER);

        add(tablesPanel, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private org.jdesktop.swingx.JXHeader jXHeader1;
    private javax.swing.JPanel tablesPanel;
    // End of variables declaration//GEN-END:variables

    private void setTableModel(Array array) throws IOException {
        Vector columnNames = new Vector(array.getHeaders());
        List<List<String>> assayData = readAssayData(array);
        Vector assayDataVector = new Vector();
        for (List<String> assayRow : assayData) {
            assayDataVector.add(new Vector(assayRow));
        }

        DefaultTableModel model = new DefaultTableModel(assayDataVector, columnNames);
        table.setModel(model);
    }

    private List<List<String>> readAssayData(final Array array) throws IOException {
        SwingWorker<List<List<String>>, Object> worker = new SwingWorker<List<List<String>>, Object>() {

            @Override
            protected List<List<String>> doInBackground() throws IOException {
                return array.readAssayData(20);
            }
        };

        worker.execute();
        try {
            return worker.get();
        } catch (InterruptedException ex) {
            Logger.getLogger(RGListSettingsPanelIII.class.getName()).log(Level.SEVERE, null, ex);
            return null;
        } catch (ExecutionException ex) {
            Logger.getLogger(RGListSettingsPanelIII.class.getName()).log(Level.SEVERE, null, ex);
            throw (IOException) ex.getCause();
        }
    }
}
