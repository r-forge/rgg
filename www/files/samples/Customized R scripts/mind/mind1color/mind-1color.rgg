<rgg>
#remembering objects currently in workspace
objects.before = objects()
objects.before
##### 1. RGG CODE                                                ###############
################################################################################

##### 1.1. Tool name                                             ###############
<h3 text="Microarray Import and Normalization Device (MIND)" alignment="center" span="full"/>
<h4 text="for single-color arrays" alignment="center" span="full"/>

##### 1.2. Short description                                     ###############

<separator label="Description"/>
<label text="MIND is an RGG GUI for microarray import,normalization and quality control. 
It generates a quality report and an expressionSet object, which can be used as input for the pamr and samr GUI. 
Please note that this function requires R v2.8.0 or higher"/>
<separator/>
<gaprow height="3"/>

##### 1.3. Data import                                           ###############
##data-range: ; default-value: ; description: microarray importer
<maimporter id="ma" var="ma"/>

##### 1.4. Analysis                                              ###############
#_____VSN normalization________________________________________________________#
<group>
	##data-range: T,F; default-value: F; description: should vsn normalization be performed?
	<checkbox var="doVSN" id="vsn" label="perform VSN normalization" selected="F"/>
	<label text="Depending on the size of the data, this can take some time. Note that background correction will default to 'subtract' automatically." span="full"/>
</group>
#______________________________________________________________________________#

#_____Background correction____________________________________________________#
<separator label="Background Correction"/>
<group>
	##data-range: "none","subtract","half","minimum","movingmin","edwards","normexp"; default-value: "subtract"; description: specifies the background correction method
	<combobox id="bgCorrMethod" var="bgCorrMethod" label="Method: " items="none,subtract,half,minimum,movingmin,edwards,normexp" selected-item="subtract" enabled="${!vsn.selected}"/>
    <label text="Please note that the options 'Edwards' and 'Normexp' may produce long calculation times depending on the scale of your experiment." span="full"/>
	<label text="Offset: "/>
	##data-range: T,F; default-value: T; description: is the specified offset value selected or not?
	<radiobutton var="doSelectMinOffset" label="add minimum of all negative corrected values +1" button-group="offset" span="full" selected="T" enabled="${!vsn.selected}"/>
	<group>
		<hbox>
			<radiobutton id="offset" label="" button-group="offset" enabled="${!vsn.selected}"/>
			<label text="add: "/>
			##data-range: ; default-value: 0; description: specifies user-defined offset value
			<textfield var="bgCorrOffset" label=" " data-type="numeric" default-value="0" enabled="${offset.selected and offset.enabled}"/>
		</hbox>
	</group>
	
#_____Logarithm________________________________________________________________#

	<label text="If VSN is not selected, a log2 transformation will be applied." span="full"/>
	<label text="log2 produces NaNs for negative corrected values. To avoid this you can specify an offset." span="full"/>
</group>

#_____Normalization____________________________________________________________#
<separator label="Normalization"/>
<group>
	##data-range: "quantile","scale","none"; default-value: "quantile"; description: specifies normalization method
	<combobox var="normMethod" label="Normalization method:" items="quantile, scale, none" default-value="quantile"/>
</group>
<gaprow height="5"/>

#_____Output___________________________________________________________________#
<separator label="Create Output" span="full"/>
##data-range: T,F; default-value: F; description: Should R Objects be written to working directory?
<checkbox var="returnRObjects" label="create R Objects" selected="F"/>
##data-range: T,F; default-value: F; description: Shoudl R Objects be written to working directory as tab-sep. files?
<checkbox var="returntabfiles" label="create R Objects as tab-separated files" selected="F"/>

#_____Report creation__________________________________________________________#
<separator label="Report creation"/>
<label text="Please select covariates for labelling plots by choosing the appropriate column names in the phenoData." span="full"/>
<group>
	##data-range: T,F; default-value: F; description: Create a report?
	<checkbox id="doReport" var="createReport" label="create report: " selected="T" span="full"/>			
</group>
<group>
	<hbox>
		##data-range: T,F; default-value: F; description: Custom boxplot labels?
		<checkbox id="chooseBoxlabel" var="chooseBoxlabel" label="custom boxplot labels" selected="F" enabled="${doReport.selected}"/>
		##data-range: ; default-value: ; description: Select the desired label
		<combobox var="boxlabels" label="annotation: " items="${ma.targetfileheader}" enabled="${chooseBoxlabel.selected and chooseBoxlabel.enabled}"/>
	</hbox>
</group>
<group>
	##data-range: T,F; default-value: T; description: create MA plots of each array?
	<checkbox var="doMAplots" label="create MA plots (this may take some time)" selected="T" span="4" enabled="${doReport.selected}"/>
</group>
<group>
	<hbox>
		##data-range: T,F; default-value: F; description: Custom heatmap labels?
		<checkbox id="useheatcov" var="useheatcov" label="Use covariate for heatmaps " selected="F" enabled="${doReport.selected}"/>
		##data-range: ; default-value: ; description: Select the desired label
		<combobox var="heatcov" label="covariate: " items="${ma.targetfileheader}" enabled="${useheatcov.selected and useheatcov.enabled}"/>
	</hbox>
</group>
<group>
	<hbox>
		##data-range: T,F; default-value: T; description: Color the Principal Component plot?
		<checkbox var="doPCcolors" id="doPCcolors" label="Color PCplot" selected="F" enabled="${doReport.selected}"/>
		##data-range: ; default-value: ; description: Select the desired label
		<combobox var="pcgroup" label="corresponding to covariate: " items="${ma.targetfileheader}" enabled="${doPCcolors.selected and doPCcolors.enabled}"/>
		##data-range: 2,3,4,5,6,7; default-value: 2; description: Select the number of components in the PC plot
		<combobox var="pcncomp" label="Number of components: " items="2,3,4,5,6,7" enabled="${withPCcolor.selected and withPCcolor.enabled}"/>
	</hbox>
</group>
<separator/>
<group>
##data-range: ; default-value: ; description: Choolse directory for MIND-report
<filechooser var="outputfolder" label="Output folder: " fileselection-mode="directories-only"/>
</group>
#______________________________________________________________________________#

##### 2. R SCRIPT                                                ###############
################################################################################

##### 2.1. Tool name                                             ###############
#Microarray Import and Normalization Device

##### 2.2. Short description                                     ###############
#The Microarray Import and Normalization Device (MIND) is a GUI for R 
#which prepares microarray data for subsequent analysis by creating an
#expressionSet object of the normalized data.

##### 2.3. Package installation                                  ###############
#list of installed packages
installed.pkgs = installed.packages()

#list of required packages
required.BioCon.pkgs = c("Biobase","limma","genefilter","geneplotter","latticeExtra","vsn","arrayQualityMetrics")
required.pkgs = c("R2HTML","impute")

#finding missing packages
BioCon.toBeInstalled = required.BioCon.pkgs[!(required.BioCon.pkgs %in% installed.pkgs[,1])]
toBeInstalled = required.pkgs[!(required.pkgs %in% installed.pkgs[,1])]

#installing missing packages (if possible)
if (length(BioCon.toBeInstalled) != 0){
	source("http://bioconductor.org/biocLite.R")
	biocLite(BioCon.toBeInstalled)
}
if (length(toBeInstalled) != 0){
	install.packages(toBeInstalled,repos="http://cran.r-project.org")
}

if(! "rggMIND" %in% installed.pkgs[,1]){
	install.packages("rggMIND",repos="http://R-Forge.R-project.org")
}

#including packages
library(arrayQualityMetrics)
library(limma)
library(R2HTML)
library(impute)
library(rggMIND)
library(tcltk)

##### 2.4. Data import                                           ###############
#searches for the column with filename in it
rowvar = (1:ncol(ma$targetfile))[grep("filename",colnames(ma$targetfile), ignore.case=TRUE)]

#importing microarray data (specified by targetfile) assuming that filename lead
#s to the microarray files
G=read.maimages(files=ma$targetfile[,rowvar], source=ma$source, path=ma$path, columns = ma$columns, annotation=ma$annotation, other.columns=ma$other.columns)
#since it is a single color aray, we won't need these...
G$R = NA
G$Rb = NA

##### 2.5. Analysis                                              ###############
#_____Background correction____________________________________________________#
#background correction
if(!doVSN){

bgCorrectedG = backgroundCorrectSingle(G,bgCorrMethod)

#offset calculation if selected
if(exists("doSelectMinOffset")){
	if(doSelectMinOffset){
		bgCorrOffset = -min(bgCorrectedG$G,0)+1
	}
}
bgCorrectedG = backgroundCorrectSingle(bgCorrectedG,"none",bgCorrOffset)
}else{
#if you do vsn, background correction will subtract
bgCorrMethod = "subtract"
bgCorrectedG = backgroundCorrectSingle(G,"subtract",0)
transformedG = bgCorrectedG$G
vsnedG = justvsn(transformedG)
}
transformedG = log2(bgCorrectedG$G)
transformedG[transformedG == -Inf] = NA
#______________________________________________________________________________

#_____Normalization____________________________________________________________#
if(doVSN){	
	normalizedG = normalizeBetweenArrays(vsnedG, method=normMethod)
}else{
	normalizedG = normalizeBetweenArrays(transformedG,method=normMethod)
}
#______________________________________________________________________________#

#_____ExpressionSet creation___________________________________________________#
#taking the filenames in the target file as rownames for the phenoData (samples)
row.names = ma$targetfile[[rowvar]]
#and all other columns as the data
pData = ma$targetfile
attr(pData, "row.names") = as.character(row.names)

#setting the normalized values as expressions for the expressionset...
exprs = normalizedG
#...where the colnames of the expressions should correspont with the rownames of
#the phenoData.
colnames(exprs)=row.names
rownames(pData)=row.names

#creating annotated data frame
phenoData = new("AnnotatedDataFrame", data = pData)

featureData = new("AnnotatedDataFrame", data = G$genes)
#creating the expressionset

if(doVSN){
	trafo = "VSN"
}else{
	trafo = "Log2"
}

preprocessing = list(backgroundcorrection=bgCorrMethod, offset=bgCorrOffset, transformation=trafo ,normalization=normMethod) 
experiment = new("MIAME", preprocessing=preprocessing)
data.normalized.eSet = new("ExpressionSet", exprs = exprs, featureData = featureData, phenoData = phenoData, experiment = experiment)

#now setting the unnormalized values as expressions for the expressionset...
exprs = transformedG
colnames(exprs)=row.names
preprocessing$normalization="none"
preprocessing$transformation="Log2"
experiment = new("MIAME", preprocessing=preprocessing)
data.eSet = new("ExpressionSet", exprs=exprs, featureData = featureData, phenoData = phenoData, experiment = experiment)

#_____Output___________________________________________________________________#

if(is.na(outputfolder)){
  outputfolder=getwd()
  retval=tkmessageBox(title = "Warning",
  message = paste("An output directory is not provided.\nReport will be saved in:",outputfolder),icon = "info", type = "ok")
  print(paste("Outputs directory:",outputfolder))  
}

if(returnRObjects){
	save("data.eSet",file=paste(outputfolder,"data-eSet.RData",sep="/"))
	save("data.normalized.eSet",file=paste(outputfolder,"data-normalized-eSet.RData",sep="/"))
}

if(returntabfiles){
	write.table(cbind(data.eSet@featureData@data,exprs(data.eSet)),file=paste(outputfolder,"data-expressions.txt",sep="/"),row.names=T,col.names=NA,sep="\t",na="NA")
	write.table(cbind(data.eSet@featureData@data,exprs(data.normalized.eSet)),file=paste(outputfolder,"data-normalized-expressions.txt",sep="/"),row.names=T,col.names=NA,sep="\t", na="NA")
	write.table(phenoData(data.eSet)@data,file=paste(outputfolder,"data-targetfile.txt",sep="/"),row.names=T,col.names=NA,sep="\t",na="NA")
}
#______________________________________________________________________________#

##### 3. REPORT                                                  ###############
################################################################################

##### 3.1. Report Creation                                       ###############
#creating the report
if(!useheatcov)
	heatcov="none"

if(!doPCcolors)
	pcgroup="none"
	
if(!chooseBoxlabel)
	boxlabels="colnames"
	
if(createReport)
	createReport1color(data.eSet,data.normalized.eSet,rgghome=rgghome,reportfolder=paste(outputfolder,"report",sep="/")
	,target=ma$path,channel="green",bgCorrMethod,bgCorrOffset,normMethod,heatcov,boxlabels=boxlabels,
	pcgroup=pcgroup,pcncomp=as.integer(pcncomp),trans=trafo,maplots=TRUE)
	
#Specify objects that should stay during script
objects.stay = c("data.eSet","data.normalized.eSet","stylesheet")

objects.after = c(objects.before,objects.stay)

#removing 'temporary' objects
remove(list=objects()[!(objects() %in% objects.after)])
</rgg>