<rgg>
isArrayQualityMetricsInstalled = FALSE
isLimmaInstalled = FALSE

pkgs = installed.packages()
for(i in 1:nrow(pkgs)){
	if(pkgs[i] == "arrayQualityMetrics")
		isArrayQualityMetricsInstalled = TRUE
	if(pkgs[i] == "limma")
		isLimmaInstalled = TRUE
}

if(!isArrayQualityMetricsInstalled){
	source("http://bioconductor.org/biocLite.R")
    biocLite("arrayQualityMetrics")
}

if(!isLimmaInstalled){
	source("http://bioconductor.org/biocLite.R")
    biocLite("limma")
}

library("arrayQualityMetrics")

<h3 text="Micro Array quality assesment with arrayQuality Metrics v1.0" aligment="center" span="full"/>
<separator label="Description" span="full"/>
<label text="GUI for the R package arrayQualityMetrics. For further information go to www.bioconductor.org."/>

<gaprow height="3"/>
<separator label="Data import" span="full"/>

<maimporter id="ma" targetfile-var="targetfile" source-var="source" 
other-columns="Row,Column" other-columns-var="other.columns" columns-var="columns"
annotation-var="annotation" path-var="path"/>

rowvar = (1:ncol(targetfile))[grep("filename",colnames(targetfile), ignore.case=TRUE)]
row.names = targetfile[[rowvar]]
pData = targetfile[-rowvar]
attr(pData, "row.names") = as.character(row.names)
p = new("AnnotatedDataFrame", data = pData)

if(source == "affymetrix"){
	library(affy)	
	eSet = read.affybatch(filenames=paste(path,targetfile[,rowvar],sep="/"),phenoData=p)
}else{
	library("limma")
	CCl4_RGList=read.maimages(files=targetfile[,rowvar], source=source, path=path, columns = columns, annotation=annotation, other.columns=other.columns)

	featureData = new("AnnotatedDataFrame", data = CCl4_RGList$genes)
	assayData = with(CCl4_RGList, assayDataNew(R=R, G=G, Rb=Rb, Gb=Gb))
	eSet = new("NChannelSet",assayData = assayData,featureData = featureData,phenoData = p)
}
<separator label="Normalization" span="full"/>
<group>
	<hbox>
		<checkbox var="isNorm" id="isNorm" label="Variance stabilization method"/>		
		<slider var="x" label="    subsample(%)" paint-value="t" paint-labels="TRUE" major-tick-spacing="10" enabled="${isNorm.selected}"/>
	</hbox>
</group>

if(isNorm){
	eSet = justvsn(eSet, subsample=ceiling(nrow(eSet) * (x /100)))
}

if (!is.null(eSet$other$Row) &amp; !is.null(eSet$other$Column)){
	featureData(eSet)$X = eSet$other$Row[,1]
	featureData(eSet)$Y = eSet$other$Column[,1]
}

<separator label="Mapping of reporters" span="full"/>
<group>
	if(<checkbox label="Mapping of reporters" id="mr" span="full" enabled="${!ma.affymetrix}"/>){
		spot = <combobox items="${ma.annotation}" label="select spot targets" enabled="${mr.selected and mr.enabled}"/>
		filter = <textfield label="set filter" default-value="^NM" enabled="${mr.selected and mr.enabled}"/>
		featureData(eSet)$hasTarget = (regexpr(filter, featureData(eSet)[[spot]]) > 0)	
	}
</group>

<group>
	<hbox>
		if(<checkbox label="covariate (sample annotation to show as the sidebar in the heatmaps" id="cov"/>){
			phenoData(eSet)$Covariate = targetfile$<combobox items="${ma.targetfileheader}" enabled="${cov.selected}"/>
		}
	</hbox>
</group>

<separator label="Report Production" span="full"/>
<group>
	<checkbox var="logtransform" label="Log transformation"/>
	<checkbox var="splitplots" label="Split plots"/>
	<filechooser var="outputdir" label="Output directory" fileselection-mode="directories-only"/>
</group>

arrayQualityMetrics(expressionset = eSet,outdir = outputdir,force = TRUE,do.logtransform = logtransform,split.plots = splitplots)
</rgg>