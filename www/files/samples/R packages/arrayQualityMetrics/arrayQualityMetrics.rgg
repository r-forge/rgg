<rgg>

################################################################################
##### 1. RGG CODE                                                ###############
################################################################################


##### 1.1. Tool name                                             ###############
<h3 text="Micro Array quality assesment with arrayQuality Metrics v1.0" aligment="center" span="full"/>


##### 1.2. Short description                                     ###############
<separator label="Description" span="full"/>
<label text="GUI for the R package arrayQualityMetrics.
Please note that arrayQualityMetrics requires a minimum of two microarray files. 
For further information go to bioconductor.org/packages/2.3/bioc/html/arrayQualityMetrics.html."/>

<gaprow height="3"/>
<separator label="Data import" span="full"/>


##### 1.3. Data import                                           ###############
<maimporter var="ma" id="ma" other-columns="Row,Column"/>


##### 1.4. Analysis                                              ###############
<separator label="Normalization" span="full"/>
<group>
	<hbox>
		<checkbox var="isNorm" id="isNorm" label="Variance stabilization method"/>		
		<slider var="x" label="    subsample(%)" paint-value="t" paint-labels="TRUE" major-tick-spacing="10" enabled="${isNorm.selected}"/>
	</hbox>
</group>


##### 1.5. Reporting                                             ###############
<separator label="Mapping of reporters" span="full"/>
<group>
	<checkbox var="flagMappingOfReporters" label="Mapping of reporters" id="mr" span="full" enabled="${!ma.affymetrix}"/>
	<combobox var="spot" items="${ma.annotation}" label="select spot targets" enabled="${mr.selected and mr.enabled}"/>
	<textfield var="filter" label="set filter" default-value="^NM" enabled="${mr.selected and mr.enabled}"/>
</group>

<group>
	<hbox>
		<checkbox var="flagCov" label="covariate (sample annotation to show as the sidebar in the heatmaps" id="cov"/>
		<combobox var="targetfileheader" items="${ma.targetfileheader}" enabled="${cov.selected}"/>
	</hbox>
</group>

<separator label="Report Production" span="full"/>
<group>
	<checkbox var="logtransform" label="Log transformation"/>
	<checkbox var="splitplots" label="Split plots"/>
	<filechooser var="outputdir" label="Output directory" fileselection-mode="directories-only"/>
</group>




################################################################################
##### 2. R CODE                                                #################
################################################################################

##### 2.1. Package dependencies                                  ###############

isArrayQualityMetricsInstalled = FALSE
isLimmaInstalled = FALSE

pkgs = installed.packages()
for(i in 1:nrow(pkgs)){
	if(pkgs[i] == "arrayQualityMetrics")
		isArrayQualityMetricsInstalled = TRUE
	if(pkgs[i] == "limma")
		isLimmaInstalled = TRUE
}

if(!isArrayQualityMetricsInstalled){
	source("http://bioconductor.org/biocLite.R")
    biocLite("arrayQualityMetrics")
}

if(!isLimmaInstalled){
	source("http://bioconductor.org/biocLite.R")
    biocLite("limma")
}

library("arrayQualityMetrics")
library(tcltk)

##### 2.1. Data import                                           ###############

rowvar = (1:ncol(ma$targetfile))[grep("filename",colnames(ma$targetfile), ignore.case=TRUE)]
row.names = ma$targetfile[[rowvar]]
pData = ma$targetfile[-rowvar]
attr(pData, "row.names") = as.character(row.names)
p = new("AnnotatedDataFrame", data = pData)

if(ma$source == "affymetrix"){
	library(affy)	
	eSet = read.affybatch(filenames=paste(ma$path,ma$targetfile[,rowvar],sep="/"),phenoData=p)
}else{
	library("limma")
	CCl4_RGList=read.maimages(files=ma$targetfile[,rowvar], source=ma$source, path=ma$path, columns = ma$columns, 
	annotation=ma$annotation, other.columns=ma$other.columns)

	featureData = new("AnnotatedDataFrame", data = CCl4_RGList$genes)
	assayData = with(CCl4_RGList, assayDataNew(R=R, G=G, Rb=Rb, Gb=Gb))
	eSet = new("NChannelSet",assayData = assayData,featureData = featureData,phenoData = p)
}


##### 2.2. Analysis                                              ###############

if(is.na(outputdir)){  
  outputdir=paste(getwd(),"report",sep="/")
  if(!file.exists(outputdir))
	dir.create(outputdir)
  retval=tkmessageBox(title = "Warning",
  message = paste("An output directory is not provided.\nReport will be saved in:",outputdir),icon = "info", type = "ok")
}else{
	outputdir=paste(outputdir,"report",sep="/")
	if(!file.exists(outputdir))
		dir.create(outputdir)
}

if(length(ma$targetfile$FileName)>1){

if(isNorm){
	eSet = justvsn(eSet, subsample=ceiling(nrow(eSet) * (x /100)))
}

if (!is.null(eSet$other$Row) &amp; !is.null(eSet$other$Column)){
	featureData(eSet)$X = eSet$other$Row[,1]
	featureData(eSet)$Y = eSet$other$Column[,1]
}


##### 2.3. Reporting                                              ###############

if(flagMappingOfReporters){
	featureData(eSet)$hasTarget = (regexpr(filter, featureData(eSet)[[spot]]) > 0)	
}

if(flagCov){
	phenoData(eSet)$Covariate = ma$targetfile$targetfileheader
}

arrayQualityMetrics(expressionset = eSet,outdir = outputdir,force = TRUE,do.logtransform = logtransform,split.plots = splitplots)
browseURL(paste(outputdir,"QMreport.html",sep="/"))
}else{
  retval=tkmessageBox(title = "Error",
  message = "A minimum two microarray files are required!",icon = "error", type = "ok")
}
</rgg>